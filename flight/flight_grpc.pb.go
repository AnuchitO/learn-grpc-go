// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: flight.proto

package flight

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Flights_GetFlight_FullMethodName     = "/flight.Flights/GetFlight"
	Flights_GetFlightList_FullMethodName = "/flight.Flights/GetFlightList"
)

// FlightsClient is the client API for Flights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightsClient interface {
	GetFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	GetFlightList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Flight], error)
}

type flightsClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightsClient(cc grpc.ClientConnInterface) FlightsClient {
	return &flightsClient{cc}
}

func (c *flightsClient) GetFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flight)
	err := c.cc.Invoke(ctx, Flights_GetFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetFlightList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Flight], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Flights_ServiceDesc.Streams[0], Flights_GetFlightList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Flight]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Flights_GetFlightListClient = grpc.ServerStreamingClient[Flight]

// FlightsServer is the server API for Flights service.
// All implementations must embed UnimplementedFlightsServer
// for forward compatibility.
type FlightsServer interface {
	GetFlight(context.Context, *Flight) (*Flight, error)
	GetFlightList(*emptypb.Empty, grpc.ServerStreamingServer[Flight]) error
	mustEmbedUnimplementedFlightsServer()
}

// UnimplementedFlightsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlightsServer struct{}

func (UnimplementedFlightsServer) GetFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlight not implemented")
}
func (UnimplementedFlightsServer) GetFlightList(*emptypb.Empty, grpc.ServerStreamingServer[Flight]) error {
	return status.Errorf(codes.Unimplemented, "method GetFlightList not implemented")
}
func (UnimplementedFlightsServer) mustEmbedUnimplementedFlightsServer() {}
func (UnimplementedFlightsServer) testEmbeddedByValue()                 {}

// UnsafeFlightsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightsServer will
// result in compilation errors.
type UnsafeFlightsServer interface {
	mustEmbedUnimplementedFlightsServer()
}

func RegisterFlightsServer(s grpc.ServiceRegistrar, srv FlightsServer) {
	// If the following call pancis, it indicates UnimplementedFlightsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Flights_ServiceDesc, srv)
}

func _Flights_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_GetFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetFlightList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlightsServer).GetFlightList(m, &grpc.GenericServerStream[emptypb.Empty, Flight]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Flights_GetFlightListServer = grpc.ServerStreamingServer[Flight]

// Flights_ServiceDesc is the grpc.ServiceDesc for Flights service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flights_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flight.Flights",
	HandlerType: (*FlightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlight",
			Handler:    _Flights_GetFlight_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFlightList",
			Handler:       _Flights_GetFlightList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flight.proto",
}
